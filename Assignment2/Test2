S -> IMPORT_LIST FUNC_LIST
IMPORT_LIST -> IMPORT_STMT IMPORT_LIST | ϵ
IMPORT_STMT -> import ID ;
FUNC_LIST -> FUNC FUNC_LIST | ϵ
FUNC -> RET_TYPE ID ( PARAMS ) { STMT_LIST }
RET_TYPE -> DATA_TYPE | void
DATA_TYPE -> int | float | boolean | char | string
PARAMS -> DECL_LIST | ϵ
DECL_LIST -> DECL_SINGLE DECL_LIST'
DECL_SINGLE -> int ID | float ID | boolean ID | char ID | string ID
STMT_LIST -> STMT ; STMT_LIST | BLOCK STMT_LIST | ϵ
STMT -> DECL_STMT | ASSN_STMT | OUT_STMT | RET_STMT | INC_STMT | FLOW_STMT
DECL_STMT -> DECL_MULTI | DECL_ASSN
DECL_MULTI -> int ID_LIST | float ID_LIST | boolean ID_LIST | char ID_LIST | string ID_LIST
ID_LIST -> ID ID_LIST'
DECL_ASSN -> int ASSN_LIST | float ASSN_LIST | boolean ASSN_LIST | char ASSN_LIST | string ASSN_LIST
ASSN_LIST -> ASSN_STMT ASSN_LIST'
ASSN_STMT -> ID = OUT_STMT
OUT_STMT -> ( OUT_STMT ) | ID | ARITH_STMT | BOOL_STMT | FUNC_CALL | CONST
ARITH_STMT -> ( OUT_STMT ) ARITH_OP OUT_STMT ARITH_STMT' | ID ARITH_OP OUT_STMT ARITH_STMT' | BOOL_STMT ARITH_OP OUT_STMT ARITH_STMT' | FUNC_CALL ARITH_OP OUT_STMT ARITH_STMT' | CONST ARITH_OP OUT_STMT ARITH_STMT'
BOOL_STMT -> CONST BOOL_STMT''''' | FUNC_CALL BOOL_STMT'''' | ID BOOL_STMT''' | ( OUT_STMT ) BOOL_STMT'' | ! OUT_STMT BOOL_STMT'
FUNC_CALL -> ID ( FUNC_CALL' 
ARG_LIST -> ARG ARG_LIST'
ARG -> ID ARG'' | CONST
CONST -> STR_LIT | INT_LIT | FLT_LIT | BOOL_LIT
RET_STMT -> return OUT_STMT
INC_STMT -> ID INC_OP OUT_STMT
FLOW_STMT -> break | continue
BLOCK -> COND_BLOCK | LOOP_BLOCK
COND_BLOCK -> if ( BOOL_STMT ) { STMT_LIST } COND_BLOCK'
LOOP_BLOCK -> while ( BOOL_STMT ) { STMT_LIST }
ARITH_STMT' -> ARITH_OP OUT_STMT ARITH_STMT' | ϵ
BOOL_STMT' -> ARITH_OP OUT_STMT ARITH_STMT' COMP_OP OUT_STMT BOOL_STMT' | COMP_OP OUT_STMT BOOL_STMT' | ϵ
DECL_LIST' -> ϵ  | , DECL_LIST
ID_LIST' -> ϵ | , ID_LIST
ASSN_LIST' -> ϵ | , ASSN_LIST
BOOL_STMT'' -> COMP_OP OUT_STMT BOOL_STMT' | ARITH_OP OUT_STMT ARITH_STMT' COMP_OP OUT_STMT BOOL_STMT'
BOOL_STMT''' -> COMP_OP OUT_STMT BOOL_STMT' | ARITH_OP OUT_STMT ARITH_STMT' COMP_OP OUT_STMT BOOL_STMT'
BOOL_STMT'''' -> ARITH_OP OUT_STMT ARITH_STMT' COMP_OP OUT_STMT BOOL_STMT' | COMP_OP OUT_STMT BOOL_STMT'
BOOL_STMT''''' -> ARITH_OP OUT_STMT ARITH_STMT' COMP_OP OUT_STMT BOOL_STMT' | COMP_OP OUT_STMT BOOL_STMT'
FUNC_CALL' -> ARG_LIST ) | )
ARG_LIST' -> ϵ | , ARG_LIST
ARG' -> ARG_LIST ) | )
ARG'' -> ( ARG' | ϵ
COND_BLOCK' -> ϵ | else { STMT_LIST }