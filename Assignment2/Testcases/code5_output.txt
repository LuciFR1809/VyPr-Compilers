Line: 1, Token: keyword, Lexeme: import
Line: 1, Token: identifier, Lexeme: solid
Line: 1, Token: delimiter, Lexeme: ;
Line: 3, Token: keyword, Lexeme: float
Line: 3, Token: identifier, Lexeme: main
Line: 3, Token: delimiter, Lexeme: (
Line: 3, Token: keyword, Lexeme: string
Line: 3, Token: identifier, Lexeme: yt
Line: 3, Token: delimiter, Lexeme: )
Line: 3, Token: delimiter, Lexeme: {
Line: 4, Token: identifier, Lexeme: print
Line: 4, Token: delimiter, Lexeme: (
Line: 4, Token: identifier, Lexeme: yt
Line: 4, Token: delimiter, Lexeme: )
Line: 4, Token: delimiter, Lexeme: ;
Line: 5, Token: keyword, Lexeme: do
Line: 5, Token: delimiter, Lexeme: {
Line: 6, Token: identifier, Lexeme: yt
Line: 6, Token: operator, Lexeme: +=
Line: 6, Token: string literal, Lexeme: "ww"
Line: 6, Token: delimiter, Lexeme: ;
Line: 7, Token: keyword, Lexeme: if
Line: 7, Token: delimiter, Lexeme: (
Line: 7, Token: identifier, Lexeme: len
Line: 7, Token: delimiter, Lexeme: (
Line: 7, Token: identifier, Lexeme: yt
Line: 7, Token: delimiter, Lexeme: )
Line: 7, Token: operator, Lexeme: ==
Line: 7, Token: integer_literal, Lexeme: 12
Line: 7, Token: delimiter, Lexeme: )
Line: 8, Token: keyword, Lexeme: break
Line: 8, Token: delimiter, Lexeme: ;
Line: 9, Token: delimiter, Lexeme: }
Line: 9, Token: keyword, Lexeme: while
Line: 9, Token: delimiter, Lexeme: (
Line: 9, Token: keyword, Lexeme: true
Line: 9, Token: delimiter, Lexeme: )
Line: 9, Token: delimiter, Lexeme: ;
Line: 10, Token: delimiter, Lexeme: }
