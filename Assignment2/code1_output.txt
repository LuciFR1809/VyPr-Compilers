Line: 1, Token: keyword, Lexeme: import
Line: 1, Token: identifier, Lexeme: x
Line: 1, Token: delimiter, Lexeme: ;
Line: 2, Token: keyword, Lexeme: import
Line: 2, Token: identifier, Lexeme: y
Line: 2, Token: delimiter, Lexeme: ;
Line: 3, Token: keyword, Lexeme: import
Line: 3, Token: identifier, Lexeme: z
Line: 3, Token: delimiter, Lexeme: ;
Line: 5, Token: keyword, Lexeme: int
Line: 5, Token: identifier, Lexeme: main
Line: 5, Token: delimiter, Lexeme: (
Line: 5, Token: delimiter, Lexeme: )
Line: 5, Token: delimiter, Lexeme: {
Line: 6, Token: keyword, Lexeme: int
Line: 6, Token: identifier, Lexeme: mul
Line: 6, Token: operator, Lexeme: =
Line: 6, Token: integer_literal, Lexeme: 1
Line: 6, Token: delimiter, Lexeme: ;
Line: 7, Token: keyword, Lexeme: for
Line: 7, Token: delimiter, Lexeme: (
Line: 7, Token: keyword, Lexeme: int
Line: 7, Token: identifier, Lexeme: i
Line: 7, Token: operator, Lexeme: =
Line: 7, Token: integer_literal, Lexeme: 1
Line: 7, Token: delimiter, Lexeme: ;
Line: 7, Token: identifier, Lexeme: i
Line: 7, Token: operator, Lexeme: <
Line: 7, Token: integer_literal, Lexeme: 9
Line: 7, Token: delimiter, Lexeme: ;
Line: 7, Token: identifier, Lexeme: i
Line: 7, Token: operator, Lexeme: +
Line: 7, Token: delimiter, Lexeme: )
Line: 7, Token: delimiter, Lexeme: {
Line: 8, Token: identifier, Lexeme: mul
Line: 8, Token: operator, Lexeme: =
Line: 8, Token: identifier, Lexeme: mul
Line: 8, Token: operator, Lexeme: *
Line: 8, Token: identifier, Lexeme: i
Line: 8, Token: delimiter, Lexeme: ;
Line: 9, Token: delimiter, Lexeme: }
Line: 10, Token: keyword, Lexeme: return
Line: 10, Token: identifier, Lexeme: mul
Line: 10, Token: delimiter, Lexeme: ;
Line: 11, Token: delimiter, Lexeme: }
