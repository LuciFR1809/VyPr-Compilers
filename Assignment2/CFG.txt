ID == identifier
STR_LIT == string literal
INT_LIT == integer literal
FLT_LIT == floating literal
BOOL_LIT == ['true', 'false']
COMP_OP == ['==', '<=', '>=', '!=', '&&', '||', '<', '>']
ARITH_OP == ['<<', '>>', '+', '-', '*', '%', '/']
INC_OP == ['+=', '-=', '*=', '/=', '%=']

S -> `IMPORT_LIST` `FUNC_LIST`

    IMPORT_LIST -> `IMPORT_STMT` `IMPORT_LIST` | empty
        IMPORT_STMT -> import `ID`;

    FUNC_LIST -> `FUNC` `FUNC_LIST` | empty
        FUNC -> `RET_TYPE` `ID`(`PARAMS`){`STMT_LIST`}

            RET_TYPE -> `DATA_TYPE` | void
                DATA_TYPE -> int | float | boolean | char | string

            PARAMS -> `DECL_LIST` | empty
                DECL_LIST -> `DECL_SINGLE` | `DECL_SINGLE`, `DECL_LIST`
                    DECL_SINGLE -> `DATA_TYPE` `ID`

            STMT_LIST -> `STMT`; `STMT_LIST` | `BLOCK` `STMT_LIST` | empty

                STMT -> `DECL_STMT` | `ASSN_STMT` | `OUT_STMT` | `RET_STMT` | `INC_STMT` | `FLOW_STMT`

                    DECL_STMT -> `DECL_MULTI` | `DECL_ASSN`

                        DECL_MULTI -> `DATA_TYPE` `ID_LIST`
                            ID_LIST -> `ID` | `ID`, `ID_LIST`

                        DECL_ASSN -> `DATA_TYPE` `ASSN_LIST`
                            ASSN_LIST -> `ASSN_STMT` | `ASSN_STMT`, `ASSN_LIST`

                    ASSN_STMT -> `ID` = `OUT_STMT`

                    OUT_STMT -> (`OUT_STMT`) | `ID` | `ARITH_STMT` | `BOOL_STMT` | `FUNC_CALL` | `CONST`

                        ARITH_STMT -> `OUT_STMT` `ARITH_OP` `OUT_STMT`

                        BOOL_STMT -> `OUT_STMT` `COMP_OP` `OUT_STMT` | !`OUT_STMT`

                        FUNC_CALL -> `ID`(`ARG_LIST`) | `ID`()
                            ARG_LIST -> `ARG` | `ARG`, `ARG_LIST`
                                ARG -> `ID` | `FUNC_CALL` | `CONST`

                        CONST -> `STR_LIT` | `INT_LIT` | `FLT_LIT` | `BOOL_LIT`

                    RET_STMT -> return `OUT_STMT`

                    INC_STMT -> `ID` `INC_OP` `OUT_STMT`

                    FLOW_STMT -> break | continue

                BLOCK -> `COND_BLOCK` | `LOOP_BLOCK`

                    COND_BLOCK -> if(BOOL_STMT){STMT_LIST} | if(BOOL_STMT){STMT_LIST} else{STMT_LIST}
                    
                    LOOP_BLOCK -> while(BOOL_STMT){STMT_LIST}