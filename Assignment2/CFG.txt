ID == identifier
STR_LIT == string literal
INT_LIT == integer literal
FLT_LIT == floating literal

S -> IMPORT_LIST FUNC_LIST

    IMPORT_LIST -> IMPORT_STMT IMPORT_LIST | empty
        IMPORT_STMT -> import ID ;

    FUNC_LIST -> FUNC FUNC_LIST | empty
        FUNC -> RET_TYPE ID ( PARAMS ) { STMT_LIST }

            RET_TYPE -> DATA_TYPE | void
                DATA_TYPE -> int | float | boolean | char | string

            PARAMS -> DECL_LIST | empty
                DECL_LIST -> DECL_SINGLE | DECL_SINGLE , DECL_LIST
                    DECL_SINGLE -> DATA_TYPE ID

            STMT_LIST -> STMT STMT_LIST | empty
                STMT -> SINGLE_STMT ; | BLOCK | { STMT_LIST }

                    SINGLE_STMT -> DECL_STMT | ASSN_STMT | OUT_STMT | RET_STMT | INC_STMT | FLOW_STMT

                        DECL_STMT -> DATA_TYPE ID_ASSN_LIST
                            ID_ASSN_LIST -> ID | ASSN_STMT | ID , ID_ASSN_LIST | ASSN_STMT , ID_ASSN_LIST

                        ASSN_STMT -> ID = OUT_STMT

                        OUT_STMT -> OUT_STMT_1 | OUT_STMT COMP_OP_1 OUT_STMT_1

                            COMP_OP_1 -> && | ||

                            OUT_STMT_1 -> OUT_STMT_2 | OUT_STMT_1 COMP_OP_2 OUT_STMT_2

                                COMP_OP_2 -> == | <= | >= | != | < | >

                                OUT_STMT_2 -> OUT_STMT_3 | OUT_STMT_2 ARITH_OP_1 OUT_STMT_3

                                    ARITH_OP_1 -> + | -

                                    OUT_STMT_3 -> OUT_STMT_4 | OUT_STMT_3 ARITH_OP_2 OUT_STMT_4

                                        ARITH_OP_2 -> * | / | %

                                        OUT_STMT_4 -> OUT_STMT_5 | OUT_STMT_4 ARITH_OP_3 OUT_STMT_5

                                            ARITH_OP_3 -> << | >>

                                            OUT_STMT_5 -> ( OUT_STMT ) | ID | CONST | FUNC_CALL

                                                CONST -> STR_LIT | INT_LIT | FLT_LIT | BOOL_LIT
                                                    BOOL_LIT -> true | false

                                                FUNC_CALL -> ID ( ARG_LIST ) | ID ( )
                                                    ARG_LIST -> OUT_STMT | OUT_STMT , ARG_LIST

                        RET_STMT -> return OUT_STMT

                        INC_STMT -> ID INC_OP OUT_STMT
                            INC_OP -> += | -= | *= | /= | %=

                        FLOW_STMT -> break | continue

                    BLOCK -> COND_BLOCK | LOOP_BLOCK

                        COND_BLOCK -> if ( OUT_STMT ) STMT | if ( OUT_STMT ) STMT else STMT
                        
                        LOOP_BLOCK -> while ( OUT_STMT ) STMT
                                    | for ( ; ; ) STMT
                                    | for ( DECL_STMT ; ; ) STMT
                                    | for ( ; OUT_STMT ; ) STMT
                                    | for ( ; ; INC_STMT ) STMT
                                    | for ( DECL_STMT ; OUT_STMT ; ) STMT
                                    | for ( DECL_STMT ; ; INC_STMT ) STMT
                                    | for ( ; OUT_STMT ; INC_STMT ) STMT
                                    | for ( DECL_STMT ; OUT_STMT ; INC_STMT ) STMT
                                    | do STMT while ( OUT_STMT ) ;